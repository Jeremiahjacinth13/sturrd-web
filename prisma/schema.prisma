datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  userType      UserTypes   @default(BASE_USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  schoolAdmin   SchoolAdmin?
  parent        Parent?
  student       Student?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id           String        @id @default(cuid())
  longName     String
  shortName    String?
  address      String?
  city         String?
  state        String?
  admins       SchoolAdmin[]
  students     Student[]
  parents      Parent[]
  superAdminId String?
}

model SchoolAdmin {
  id           String  @id @default(cuid())
  user         User    @relation(fields: [userId], references: [id])
  school       School  @relation(fields: [schoolId], references: [id])
  schoolId     String  @unique
  userId       String  @unique
  isSuperAdmin Boolean @default(false)
}

model Parent {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  school   School?   @relation(fields: [schoolId], references: [id])
  children Student[]
  schoolId String?
  userId   String    @unique
}

model Student {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  school   School  @relation(fields: [schoolId], references: [id])
  parent   Parent? @relation(fields: [parentId], references: [id])
  userId   String  @unique
  schoolId String
  parentId String?
}

enum UserTypes {
  BASE_USER
  SCHOOL_ADMIN
  STUDENT
  PARENT
}
